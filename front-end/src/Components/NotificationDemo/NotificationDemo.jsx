import React from 'react';
import { useNotification } from '../../contexts/NotificationProvider';
import './NotificationDemo.css';

const NotificationDemo = () => {
    const { 
        showToast, 
        isConnected, 
        unreadCount, 
        getConnectionInfo,
        reconnectSocket 
    } = useNotification();

    const testNotifications = [
        {
            type: 'success',
            title: 'Th√†nh c√¥ng!',
            message: 'Thao t√°c ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán th√†nh c√¥ng.',
            createdAt: new Date().toISOString()
        },
        {
            type: 'warning',
            title: 'C·∫£nh b√°o t·ªìn kho',
            message: 'S·∫£n ph·∫©m iPhone 16 Pro Max s·∫Øp h·∫øt h√†ng (c√≤n 5 s·∫£n ph·∫©m).',
            createdAt: new Date().toISOString()
        },
        {
            type: 'error',
            title: 'L·ªói h·ªá th·ªëng',
            message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i sau.',
            createdAt: new Date().toISOString()
        },
        {
            type: 'inventory_update',
            title: 'C·∫≠p nh·∫≠t kho h√†ng',
            message: 'ƒê√£ nh·∫≠p 100 s·∫£n ph·∫©m iPhone 16 Pro Max v√†o kho chi nh√°nh H√† N·ªôi.',
            createdAt: new Date().toISOString()
        },
        {
            type: 'manager_approval',
            title: 'Y√™u c·∫ßu ph√™ duy·ªát',
            message: 'C√≥ 1 y√™u c·∫ßu xu·∫•t kho c·∫ßn ph√™ duy·ªát t·ª´ nh√¢n vi√™n Nguy·ªÖn VƒÉn A.',
            createdAt: new Date().toISOString()
        },
        {
            type: 'transaction',
            title: 'Giao d·ªãch m·ªõi',
            message: 'ƒê√£ ho√†n th√†nh giao d·ªãch b√°n h√†ng #GD001 v·ªõi t·ªïng gi√° tr·ªã 25,000,000 VNƒê.',
            createdAt: new Date().toISOString()
        }
    ];

    const handleTestNotification = (notification) => {
        showToast(notification);
    };

    const handleTestAllTypes = () => {
        testNotifications.forEach((notification, index) => {
            setTimeout(() => {
                showToast(notification);
            }, index * 1000); // Delay 1 second between each notification
        });
    };

    const connectionInfo = getConnectionInfo();

    return (
        <div className="notification-demo">
            <div className="demo-header">
                <h2>üîî Demo H·ªá Th·ªëng Th√¥ng B√°o</h2>
                <p>Test c√°c lo·∫°i th√¥ng b√°o v√† ki·ªÉm tra k·∫øt n·ªëi Socket.IO</p>
            </div>

            <div className="connection-status">
                <h3>üì° Tr·∫°ng Th√°i K·∫øt N·ªëi</h3>
                <div className="status-grid">
                    <div className={`status-item ${isConnected ? 'connected' : 'disconnected'}`}>
                        <span className="status-label">Socket:</span>
                        <span className="status-value">{isConnected ? 'üü¢ ƒê√£ k·∫øt n·ªëi' : 'üî¥ Ng·∫Øt k·∫øt n·ªëi'}</span>
                    </div>
                    <div className="status-item">
                        <span className="status-label">Th√¥ng b√°o ch∆∞a ƒë·ªçc:</span>
                        <span className="status-value">{unreadCount}</span>
                    </div>
                    <div className="status-item">
                        <span className="status-label">Th·ª≠ k·∫øt n·ªëi l·∫°i:</span>
                        <span className="status-value">{connectionInfo.reconnectAttempts}/{connectionInfo.maxReconnectAttempts}</span>
                    </div>
                </div>
                
                {!isConnected && (
                    <button className="reconnect-btn" onClick={reconnectSocket}>
                        üîÑ K·∫øt n·ªëi l·∫°i
                    </button>
                )}
            </div>

            <div className="demo-actions">
                <h3>üß™ Test Th√¥ng B√°o</h3>
                <div className="action-grid">
                    {testNotifications.map((notification, index) => (
                        <button
                            key={index}
                            className={`demo-btn ${notification.type}`}
                            onClick={() => handleTestNotification(notification)}
                        >
                            <span className="btn-icon">
                                {notification.type === 'success' && '‚úÖ'}
                                {notification.type === 'warning' && '‚ö†Ô∏è'}
                                {notification.type === 'error' && '‚ùå'}
                                {notification.type === 'inventory_update' && 'üì¶'}
                                {notification.type === 'manager_approval' && 'üë§'}
                                {notification.type === 'transaction' && 'üí∞'}
                            </span>
                            <span className="btn-text">{notification.title}</span>
                        </button>
                    ))}
                </div>
                
                <button className="demo-btn-all" onClick={handleTestAllTypes}>
                    üéØ Test T·∫•t C·∫£ (Delay 1s)
                </button>
            </div>

            <div className="demo-info">
                <h3>üí° H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng</h3>
                <ul>
                    <li><strong>NotificationBell:</strong> Click v√†o icon chu√¥ng ·ªü header ƒë·ªÉ xem danh s√°ch th√¥ng b√°o</li>
                    <li><strong>Toast Notifications:</strong> Th√¥ng b√°o popup s·∫Ω t·ª± ƒë·ªông hi·ªán v√† bi·∫øn m·∫•t sau 5 gi√¢y</li>
                    <li><strong>Real-time:</strong> Th√¥ng b√°o m·ªõi s·∫Ω t·ª± ƒë·ªông hi·ªán khi c√≥ socket events</li>
                    <li><strong>Connection Status:</strong> Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi v√† reconnect t·ª± ƒë·ªông</li>
                    <li><strong>Mark as Read:</strong> Click v√†o th√¥ng b√°o ƒë·ªÉ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc</li>
                </ul>
            </div>

            <div className="demo-technical">
                <h3>‚öôÔ∏è Th√¥ng Tin K·ªπ Thu·∫≠t</h3>
                <pre className="connection-info">
                    {JSON.stringify(connectionInfo, null, 2)}
                </pre>
            </div>
        </div>
    );
};

export default NotificationDemo;