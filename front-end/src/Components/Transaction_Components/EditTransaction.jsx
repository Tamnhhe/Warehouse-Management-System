//Nguy·ªÖn B·∫£o Phi-HE173187-28/2/2025
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams, useNavigate } from "react-router-dom";
// <-- KHU V·ª∞C THAY ƒê·ªîI: Import th√™m component t·ª´ react-bootstrap -->
import { Form, Button, Card, Row, Col, Alert } from "react-bootstrap";

const EditTransaction = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [formData, setFormData] = useState({ products: [] });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true); // ‚úÖ TH√äM: Loading state

  // ‚úÖ TH√äM: H√†m l·∫•y token t·ª´ localStorage
  const getAuthHeaders = () => {
    const token = localStorage.getItem('authToken'); // ‚úÖ S·ª¨A: ƒê·ªïi t·ª´ 'token' th√†nh 'authToken'
    console.log('üîç DEBUG - Token from localStorage:', token); // Debug log
    return token ? { Authorization: `Bearer ${token}` } : {};
  };

  useEffect(() => {
    console.log('üîç DEBUG - Making request to:', `http://localhost:9999/inventoryTransactions/getTransactionById/${id}`);
    console.log('üîç DEBUG - Headers:', getAuthHeaders());

    axios
      .get(`http://localhost:9999/inventoryTransactions/getTransactionById/${id}`, {
        headers: getAuthHeaders() // ‚úÖ TH√äM: Headers v·ªõi token
      })
      .then((res) => {
        console.log("‚úÖ Transaction data loaded successfully:", res.data); // Debug log
        if (res.data?.products) {
          setFormData({
            products: res.data.products.map((p) => ({
              supplierProductId: p.supplierProductId?._id || null,
              // ‚úÖ S·ª¨A: L·∫•y t√™n s·∫£n ph·∫©m t·ª´ supplierProductId.productName
              productName: p.supplierProductId?.productName || "Kh√¥ng c√≥ t√™n",
              requestQuantity: p.requestQuantity ?? 0,
              receiveQuantity: p.receiveQuantity ?? 0,
              defectiveProduct: p.defectiveProduct ?? 0,
              achievedProduct: p.achievedProduct ?? 0,
              price: p.price ?? 0,
              expiry: p.expiry ? new Date(p.expiry).toISOString().split("T")[0] : "",
            })),
            // ‚úÖ TH√äM: Th√™m th√¥ng tin ng∆∞·ªùi x·ª≠ l√Ω v√†o formData
            operator: res.data.operator || null,
            reviewedBy: res.data.reviewedBy || null, // ‚úÖ TH√äM: Th√™m th√¥ng tin ng∆∞·ªùi r√† so√°t
            reviewedAt: res.data.reviewedAt || null, // ‚úÖ TH√äM: Th√™m th·ªùi gian r√† so√°t
          });
        }
      })
      .catch((err) => {
        console.error("‚ùå Error details:", {
          status: err.response?.status,
          statusText: err.response?.statusText,
          data: err.response?.data,
          headers: err.response?.headers
        });

        if (err.response?.status === 401 || err.response?.status === 403) {
          // ‚úÖ S·ª¨A: Ch·ªâ hi·ªÉn th·ªã l·ªói, kh√¥ng t·ª± ƒë·ªông logout
          setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu giao d·ªãch. Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p ho·∫∑c ƒëƒÉng nh·∫≠p l·∫°i.");
        } else {
          setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i.");
        }
      })
      .finally(() => setLoading(false)); // ‚úÖ TH√äM: ƒê·∫∑t loading th√†nh false sau khi ho√†n th√†nh g·ªçi API
  }, [id, navigate]);

  // <-- KHU V·ª∞C THAY ƒê·ªîI L·ªöN: C·∫≠p nh·∫≠t h√†m handleChange ƒë·ªÉ t·ª± ƒë·ªông t√≠nh to√°n -->
  const handleChange = (e, index, field) => {
    const { value } = e.target;

    setFormData((prev) => {
      const updatedProducts = [...prev.products];
      const productToUpdate = { ...updatedProducts[index] };

      // C·∫≠p nh·∫≠t gi√° tr·ªã cho tr∆∞·ªùng ƒëang ƒë∆∞·ª£c thay ƒë·ªïi
      if (field === "expiry") {
        productToUpdate[field] = value;
      } else if (field === "price") {
        // ‚úÖ TH√äM: Validation cho gi√° nh·∫≠p ph·∫£i > 0
        const numericValue = value === "" ? "" : parseFloat(value);
        if (numericValue <= 0 && numericValue !== "") {
          return prev; // Kh√¥ng c·∫≠p nh·∫≠t n·∫øu gi√° <= 0
        }
        productToUpdate[field] = numericValue;
      } else {
        // X·ª≠ l√Ω cho c√°c tr∆∞·ªùng s·ªë kh√°c
        const numericValue = value === "" ? "" : Math.max(0, Number(value.replace(/^0+(?=\d)/, "")));
        productToUpdate[field] = numericValue;
      }

      // T·ª± ƒë·ªông t√≠nh to√°n "S·ªë l∆∞·ª£ng l·ªói" khi "S·ªë l∆∞·ª£ng ƒë·∫°t" ho·∫∑c "S·ªë l∆∞·ª£ng nh·∫≠n" thay ƒë·ªïi
      if (field === 'achievedProduct' || field === 'receiveQuantity') {
        const receiveQty = (field === 'receiveQuantity') ? Number(productToUpdate.receiveQuantity) : Number(productToUpdate.receiveQuantity);
        const achievedQty = (field === 'achievedProduct') ? Number(productToUpdate.achievedProduct) : Number(productToUpdate.achievedProduct);

        // ƒê·∫£m b·∫£o s·ªë l∆∞·ª£ng ƒë·∫°t kh√¥ng l·ªõn h∆°n s·ªë l∆∞·ª£ng nh·∫≠n
        if (achievedQty > receiveQty) {
          productToUpdate.achievedProduct = receiveQty; // Gi·ªõi h·∫°n gi√° tr·ªã
          productToUpdate.defectiveProduct = 0;
        } else {
          productToUpdate.defectiveProduct = Math.max(0, receiveQty - achievedQty);
        }
      }

      updatedProducts[index] = productToUpdate;
      return { products: updatedProducts };
    });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setError(''); // Reset l·ªói

    // ‚úÖ TH√äM: Ki·ªÉm tra gi√° nh·∫≠p ph·∫£i l·ªõn h∆°n 0
    const priceValidationError = formData.products.find(
      (p) => !p.price || Number(p.price) <= 0
    );

    if (priceValidationError) {
      setError(`Gi√° nh·∫≠p c·ªßa s·∫£n ph·∫©m "${priceValidationError.productName}" ph·∫£i l·ªõn h∆°n 0.`);
      return;
    }

    const validationError = formData.products.find(
      (p) => Number(p.defectiveProduct) + Number(p.achievedProduct) !== Number(p.receiveQuantity)
    );

    if (validationError) {
      setError(`L·ªói d·ªØ li·ªáu ·ªü s·∫£n ph·∫©m "${validationError.productName}". T·ªïng s·ªë l∆∞·ª£ng ƒê·∫°t v√† L·ªói kh√¥ng b·∫±ng S·ªë l∆∞·ª£ng nh·∫≠n.`);
      return;
    }

    axios
      .put(`http://localhost:9999/inventoryTransactions/updateTransaction/${id}`, formData, {
        headers: {
          "Content-Type": "application/json",
          ...getAuthHeaders() // ‚úÖ TH√äM: Headers v·ªõi token
        },
      })
      .then(() => {
        alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
        navigate("/receipts");
      })
      .catch((err) => {
        if (err.response?.status === 401) {
          setError("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        } else {
          setError("L·ªói khi c·∫≠p nh·∫≠t: " + (err.response?.data?.message || err.message));
        }
      });
  };

  if (loading) {
    return <div className="text-center mt-5">Loading...</div>; // ‚úÖ TH√äM: Hi·ªÉn th·ªã loading
  }

  return (
    <div className="container mt-4">
      <h2 className="mb-4">R√† so√°t s·∫£n ph·∫©m trong phi·∫øu nh·∫≠p</h2>



      <Form onSubmit={handleSubmit}>
        {error && <Alert variant="danger">{error}</Alert>}

        {/* GIAO DI·ªÜN B·∫¢NG CHO DESKTOP */}
        <div className="d-none d-md-block table-responsive">
          <table className="table table-bordered align-middle">
            <thead className="table-light">
              <tr>
                <th>T√™n s·∫£n ph·∫©m</th>
                <th>SL Y√™u c·∫ßu</th>
                <th>SL Nh·∫≠n</th>
                <th>SL ƒê·∫°t</th>
                <th>SL L·ªói (T·ª± ƒë·ªông)</th>
                <th>Gi√° nh·∫≠p</th>
                <th>Ng√†y h·∫øt h·∫°n</th>
              </tr>
            </thead>
            <tbody>
              {formData.products.map((product, index) => (
                <tr key={index}>
                  <td>{product.productName}</td>
                  <td><Form.Control type="number" value={product.requestQuantity} readOnly disabled /></td>
                  <td><Form.Control type="number" value={product.receiveQuantity} onChange={(e) => handleChange(e, index, "receiveQuantity")} /></td>
                  <td><Form.Control type="number" value={product.achievedProduct} onChange={(e) => handleChange(e, index, "achievedProduct")} /></td>
                  <td><Form.Control type="number" value={product.defectiveProduct} readOnly /></td>
                  <td><Form.Control
                    type="number"
                    value={product.price}
                    onChange={(e) => handleChange(e, index, "price")}
                    min="0.01"
                    step="0.01"
                  /></td>
                  <td><Form.Control type="date" value={product.expiry} onChange={(e) => handleChange(e, index, "expiry")} /></td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* GIAO DI·ªÜN CARD CHO MOBILE */}
        <div className="d-md-none">
          {formData.products.map((product, index) => (
            <Card key={index} className="mb-3">
              <Card.Header as="h5">{product.productName}</Card.Header>
              <Card.Body>
                <Form.Group as={Row} className="mb-2" controlId={`req-${index}`}>
                  <Form.Label column sm="5">SL Y√™u c·∫ßu</Form.Label>
                  <Col sm="7"><Form.Control type="number" value={product.requestQuantity} readOnly disabled /></Col>
                </Form.Group>
                <Form.Group as={Row} className="mb-2" controlId={`rec-${index}`}>
                  <Form.Label column sm="5">SL Nh·∫≠n</Form.Label>
                  <Col sm="7"><Form.Control type="number" value={product.receiveQuantity} onChange={(e) => handleChange(e, index, "receiveQuantity")} /></Col>
                </Form.Group>
                <Form.Group as={Row} className="mb-2" controlId={`ach-${index}`}>
                  <Form.Label column sm="5">SL ƒê·∫°t</Form.Label>
                  <Col sm="7"><Form.Control type="number" value={product.achievedProduct} onChange={(e) => handleChange(e, index, "achievedProduct")} /></Col>
                </Form.Group>
                <Form.Group as={Row} className="mb-2" controlId={`def-${index}`}>
                  <Form.Label column sm="5">SL L·ªói</Form.Label>
                  <Col sm="7"><Form.Control type="number" value={product.defectiveProduct} readOnly /></Col>
                </Form.Group>
                <Form.Group as={Row} className="mb-2" controlId={`price-${index}`}>
                  <Form.Label column sm="5">Gi√° nh·∫≠p</Form.Label>
                  <Col sm="7"><Form.Control
                    type="number"
                    value={product.price}
                    onChange={(e) => handleChange(e, index, "price")}
                    min="0.01"
                    step="0.01"
                  /></Col>
                </Form.Group>
                <Form.Group as={Row} className="mb-2" controlId={`exp-${index}`}>
                  <Form.Label column sm="5">H·∫øt h·∫°n</Form.Label>
                  <Col sm="7"><Form.Control type="date" value={product.expiry} onChange={(e) => handleChange(e, index, "expiry")} /></Col>
                </Form.Group>
              </Card.Body>
            </Card>
          ))}
        </div>

        <div className="mt-4">
          <Button type="submit" variant="primary">L∆∞u thay ƒë·ªïi</Button>
          <Button type="button" variant="secondary" className="ms-2" onClick={() => navigate("/list-transaction")}>Quay l·∫°i</Button>
        </div>
      </Form>
    </div>
  );
};

export default EditTransaction;