//Nguy·ªÖn B·∫£o Phi-HE173187-28/2/2025
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
// <-- KHU V·ª∞C THAY ƒê·ªîI: Import th√™m Row, Col, Card -->
import { Modal, Button, Form, Row, Col, Card, Spinner } from "react-bootstrap"; 

const ListTransaction = () => {
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [selectedTransaction, setSelectedTransaction] = useState(null);
  const [newStatus, setNewStatus] = useState("");
  const [filteredTransactions, setFilteredTransactions] = useState([]);
  const [filterTransactionType, setFilterTransactionType] = useState("all");
  const [editedTransactions, setEditedTransactions] = useState(new Set()); 
  const [sortOrder, setSortOrder] = useState("asc");
  const [sortByDateOrder, setSortByDateOrder] = useState("desc");
  const [filterStatus, setFilterStatus] = useState([]); 
  const navigate = useNavigate();

  // Logic fetching v√† useEffects gi·ªØ nguy√™n, ch√∫ng ƒë√£ r·∫•t t·ªët r·ªìi.
  useEffect(() => {
    axios
      .get("http://localhost:9999/inventoryTransactions/getAllTransactions")
      .then((response) => {
        // S·∫Øp x·∫øp m·∫∑c ƒë·ªãnh theo ng√†y m·ªõi nh·∫•t tr∆∞·ªõc
        const sortedData = response.data.sort((a, b) => new Date(b.transactionDate) - new Date(a.transactionDate));
        setTransactions(sortedData);
        setFilteredTransactions(sortedData);
        setLoading(false);
      })
      .catch((error) => {
        console.error("L·ªói g·ªçi API:", error);
        setLoading(false);
      });
  }, []);

  useEffect(() => {
    let updatedTransactions = [...transactions];
    if (filterTransactionType !== "all") {
      updatedTransactions = updatedTransactions.filter(
        (t) => t.transactionType === filterTransactionType
      );
    }
    if (filterStatus.length > 0) {
      updatedTransactions = updatedTransactions.filter((t) =>
        filterStatus.includes(t.status)
      );
    }
    setFilteredTransactions(updatedTransactions);
  }, [filterTransactionType, filterStatus, transactions]);

  // C√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán (handlers) gi·ªØ nguy√™n
  const handleStatusFilterChange = (event) => {
    const { value, checked } = event.target;
    setFilterStatus((prev) => {
      const newFilterStatus = checked
        ? [...prev, value]
        : prev.filter((status) => status !== value);
      return newFilterStatus;
    });
  };

  const openStatusModal = (transaction) => {
    if (transaction.status !== "pending" || editedTransactions.has(transaction._id))
      return;
    setSelectedTransaction(transaction);
    setNewStatus(transaction.status);
    setShowModal(true);
  };

  const handleStatusChange = () => {
    if (!selectedTransaction) return;
    axios
      .put(
        `http://localhost:9999/inventoryTransactions/updateTransactionStatus/${selectedTransaction._id}`,
        { status: newStatus }
      )
      .then((res) => {
        const updatedList = transactions.map((t) =>
            t._id === selectedTransaction._id ? { ...t, status: res.data.status } : t
        );
        setTransactions(updatedList);
        setEditedTransactions((prev) => new Set(prev).add(selectedTransaction._id));
        setShowModal(false);
      })
      .catch((error) => console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error));
  };
  
  const handleFilterChange = (event) => setFilterTransactionType(event.target.value);

  const handleSortBySupplier = () => {
    const sortedTransactions = [...filteredTransactions].sort((a, b) => {
      const supplierA = a.supplier?.name ?? "";
      const supplierB = b.supplier?.name ?? "";
      return sortOrder === "asc"
        ? supplierA.localeCompare(supplierB, "vi")
        : supplierB.localeCompare(supplierA, "vi");
    });
    setFilteredTransactions(sortedTransactions);
    setSortOrder(sortOrder === "asc" ? "desc" : "asc");
  };

  const handleSortByDate = () => {
    const sortedTransactions = [...filteredTransactions].sort((a, b) => {
      return sortByDateOrder === "asc"
        ? new Date(a.transactionDate) - new Date(b.transactionDate)
        : new Date(b.transactionDate) - new Date(a.transactionDate);
    });
    setFilteredTransactions(sortedTransactions);
    setSortByDateOrder(sortByDateOrder === "asc" ? "desc" : "asc");
  };

  // Spinner khi t·∫£i
  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center" style={{ height: "80vh" }}>
        <Spinner animation="border" variant="primary" />
        <span className="ms-2">ƒêang t·∫£i d·ªØ li·ªáu...</span>
      </div>
    );
  }

  // <-- KHU V·ª∞C THAY ƒê·ªîI L·ªöN B·∫ÆT ƒê·∫¶U T·ª™ ƒê√ÇY -->
  return (
    <div className="container mt-4">
      <h2 className="text-center text-primary mb-4">Danh s√°ch giao d·ªãch</h2>

      {/* B·ªô l·ªçc ƒë√£ ƒë∆∞·ª£c l√†m responsive */}
      <Card className="mb-4">
        <Card.Body>
          <Row className="gy-3">
            <Col md={4}>
              <Form.Group controlId="filterType">
                <Form.Label className="fw-bold">Lo·∫°i giao d·ªãch</Form.Label>
                <Form.Select value={filterTransactionType} onChange={handleFilterChange}>
                  <option value="all">T·∫•t c·∫£</option>
                  <option value="import">Nh·∫≠p h√†ng</option>
                  <option value="export">Xu·∫•t h√†ng</option>
                </Form.Select>
              </Form.Group>
            </Col>
            <Col md={8}>
               <Form.Group>
                <Form.Label className="fw-bold">Tr·∫°ng th√°i</Form.Label>
                <div className="d-flex flex-wrap gap-3">
                  <Form.Check inline label="Ch·ªù x·ª≠ l√Ω" value="pending" checked={filterStatus.includes("pending")} onChange={handleStatusFilterChange} />
                  <Form.Check inline label="Ho√†n th√†nh" value="completed" checked={filterStatus.includes("completed")} onChange={handleStatusFilterChange} />
                  <Form.Check inline label="T·ª´ ch·ªëi" value="cancelled" checked={filterStatus.includes("cancelled")} onChange={handleStatusFilterChange} />
                </div>
               </Form.Group>
            </Col>
          </Row>
        </Card.Body>
      </Card>
      
      {/* GIAO DI·ªÜN B·∫¢NG CHO DESKTOP (·∫®n tr√™n mobile) */}
      <div className="d-none d-md-block table-responsive">
        <table className="table table-striped table-bordered table-hover align-middle">
          <thead className="table-light">
            <tr>
              <th>#</th>
              <th style={{ cursor: "pointer" }} onClick={handleSortBySupplier}>Nh√† cung c·∫•p {sortOrder === "asc" ? "‚Üë" : "‚Üì"}</th>
              <th>Lo·∫°i giao d·ªãch</th>
              <th style={{ cursor: "pointer" }} onClick={handleSortByDate}>Ng√†y giao d·ªãch {sortByDateOrder === "asc" ? "‚Üë" : "‚Üì"}</th>
              <th>T·ªïng ti·ªÅn</th>
              <th>Tr·∫°ng th√°i</th>
              <th style={{ minWidth: "220px" }}>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {filteredTransactions.map((transaction, index) => (
              <tr key={transaction._id}>
                <td>{index + 1}</td>
                <td>{transaction.transactionType === "import" ? transaction.supplier?.name || "N/A" : "-"}</td>
                <td><span className={`badge ${transaction.transactionType === "import" ? "bg-success" : "bg-danger"}`}>{transaction.transactionType === "import" ? "Nh·∫≠p" : "Xu·∫•t"}</span></td>
                <td>{new Date(transaction.transactionDate).toLocaleDateString()}</td>
                <td className="text-end">{transaction.totalPrice.toLocaleString()} VNƒê</td>
                <td>
                  <Button variant="outline-primary" size="sm" onClick={() => openStatusModal(transaction)} disabled={transaction.status !== "pending" || editedTransactions.has(transaction._id)}>
                    {transaction.status === "pending" && "üü° Ch·ªù x·ª≠ l√Ω"}
                    {transaction.status === "completed" && "‚úÖ Ho√†n th√†nh"}
                    {transaction.status === "cancelled" && "‚ùå T·ª´ ch·ªëi"}
                  </Button>
                </td>
                <td>
                  <Button variant="info" size="sm" className="me-2" onClick={() => navigate(transaction.transactionType === "import" ? `/transaction/${transaction._id}` : `/export-detail/${transaction._id}`)}>Xem</Button>
                  {transaction.transactionType === "import" && (
                    <Button variant="warning" size="sm" onClick={() => navigate(`/edit-transaction/${transaction._id}`)} disabled={transaction.status !== 'pending'}>R√† so√°t</Button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* GIAO DI·ªÜN CARD CHO MOBILE (·∫®n tr√™n desktop) */}
      <div className="d-md-none">
        {filteredTransactions.map((transaction) => (
          <Card key={transaction._id} className="mb-3">
            <Card.Header className="d-flex justify-content-between align-items-center">
              <div>
                <strong>{transaction.transactionType === "import" ? transaction.supplier?.name || 'Giao d·ªãch nh·∫≠p' : 'Giao d·ªãch xu·∫•t'}</strong>
              </div>
              <span className={`badge ${transaction.transactionType === "import" ? "bg-success" : "bg-danger"}`}>{transaction.transactionType === "import" ? "Nh·∫≠p" : "Xu·∫•t"}</span>
            </Card.Header>
            <Card.Body>
              <p className="mb-2"><strong>Ng√†y:</strong> {new Date(transaction.transactionDate).toLocaleDateString()}</p>
              <p className="mb-2"><strong>T·ªïng ti·ªÅn:</strong> <span className="text-danger fw-bold">{transaction.totalPrice.toLocaleString()} VNƒê</span></p>
              <div className="d-flex justify-content-between align-items-center mb-3">
                <strong>Tr·∫°ng th√°i:</strong>
                <Button variant="outline-primary" size="sm" onClick={() => openStatusModal(transaction)} disabled={transaction.status !== "pending" || editedTransactions.has(transaction._id)}>
                    {transaction.status === "pending" && "üü° Ch·ªù x·ª≠ l√Ω"}
                    {transaction.status === "completed" && "‚úÖ Ho√†n th√†nh"}
                    {transaction.status === "cancelled" && "‚ùå T·ª´ ch·ªëi"}
                </Button>
              </div>
            </Card.Body>
            <Card.Footer className="text-end">
              <Button variant="info" size="sm" className="me-2" onClick={() => navigate(transaction.transactionType === "import" ? `/transaction/${transaction._id}` : `/export-detail/${transaction._id}`)}>Xem chi ti·∫øt</Button>
              {transaction.transactionType === "import" && (
                <Button variant="warning" size="sm" onClick={() => navigate(`/edit-transaction/${transaction._id}`)} disabled={transaction.status !== 'pending'}>R√† so√°t</Button>
              )}
            </Card.Footer>
          </Card>
        ))}
      </div>

      {/* Modal kh√¥ng c·∫ßn thay ƒë·ªïi, n√≥ ƒë√£ responsive */}
      <Modal show={showModal} onHide={() => setShowModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>C·∫≠p nh·∫≠t tr·∫°ng th√°i</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <p>Giao d·ªãch: <strong>{selectedTransaction?._id}</strong></p>
          <Form>
            <Form.Check type="radio" id="status-pending" label="üü° Ch·ªù x·ª≠ l√Ω" value="pending" checked={newStatus === "pending"} onChange={(e) => setNewStatus(e.target.value)} />
            <Form.Check type="radio" id="status-completed" label="‚úÖ Ho√†n th√†nh" value="completed" checked={newStatus === "completed"} onChange={(e) => setNewStatus(e.target.value)} />
            <Form.Check type="radio" id="status-cancelled" label="‚ùå T·ª´ ch·ªëi" value="cancelled" checked={newStatus === "cancelled"} onChange={(e) => setNewStatus(e.target.value)} />
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowModal(false)}>H·ªßy</Button>
          <Button variant="primary" onClick={handleStatusChange}>X√°c nh·∫≠n</Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
};

export default ListTransaction;