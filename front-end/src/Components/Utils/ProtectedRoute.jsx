import { jwtDecode } from 'jwt-decode';
import { useNavigate, Navigate } from 'react-router-dom';
import { useState, useEffect } from 'react';

const checkTokenExpiration = () => {
    const token = localStorage.getItem('authToken');
    if (token) {
        try {
            const { exp } = jwtDecode(token);
            const currentTime = Date.now() / 1000;

            // ‚úÖ TH√äM: Ki·ªÉm tra n·∫øu token s·∫Øp h·∫øt h·∫°n trong 30 ph√∫t t·ªõi
            const timeUntilExpiry = exp - currentTime;
            if (timeUntilExpiry < 1800) { // 30 ph√∫t = 1800 seconds
                console.warn('‚ö†Ô∏è Token s·∫Øp h·∫øt h·∫°n trong 30 ph√∫t');
                // C√≥ th·ªÉ th√™m logic refresh token t·∫°i ƒë√¢y
            }

            if (currentTime >= exp) {
                console.warn('üö® Token ƒë√£ h·∫øt h·∫°n');
                localStorage.removeItem('authToken');
                return true; // Token h·∫øt h·∫°n
            }
        } catch (error) {
            console.error('Invalid token format:', error);
            localStorage.removeItem('authToken');
            return true;
        }
    }
    return !token; // Token kh√¥ng t·ªìn t·∫°i ho·∫∑c h·ª£p l·ªá
};

const ProtectedRoute = ({ children, allowedRoles, redirectTo = '/login' }) => {
    const navigate = useNavigate();
    const token = localStorage.getItem("authToken");
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        const checkAuth = () => {
            if (!token || checkTokenExpiration()) {
                setIsAuthenticated(false);
                setIsLoading(false);
                return;
            }

            try {
                const decodedToken = jwtDecode(token);
                const userRole = decodedToken.role;

                if (!allowedRoles.includes(userRole)) {
                    // Ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p nh∆∞ng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
                    setIsAuthenticated(false);
                } else {
                    setIsAuthenticated(true);
                }
            } catch (error) {
                console.error('Invalid token:', error);
                localStorage.removeItem('authToken');
                setIsAuthenticated(false);
            } finally {
                setIsLoading(false);
            }
        };

        checkAuth();
    }, [token, allowedRoles]);

    if (isLoading) {
        return <div>ƒêang ki·ªÉm tra quy·ªÅn truy c·∫≠p...</div>;
    }

    return isAuthenticated ? children : <Navigate to={redirectTo} replace />;
};

export default ProtectedRoute;
